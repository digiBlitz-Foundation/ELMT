/*  Program Name    : JudgeDetailBean.java
 *  Created Date    : Aug 29, 2006 7:27:54 PM
 *  Author          : Suresh.K
 *  Version         : 1.20
 *  CopyrightInformation:
    (c)2006,digiBlitz Technologies Inc/digiBlitz Technologies (P) Ltd. All rights reserved.
    916 W. Broad Street Suite 205, FallsChurch, VA 22046.
    
    This document is protected by copyright. No part of this document may be reproduced in any form by any means without
    prior written authorization of Sun and its licensors. if any.
 
    The information described in this document may be protected by one or more U.S.patents.foreign patents,or
    pending applications.
 */
package com.hlcmro.masters;

import com.hlcmro.exception.HLCMissingPrimaryKeyException;
import com.hlcmro.util.DBHelper;
import com.hlcmro.util.Debug;
import com.hlcmro.util.HLCEJBAllJNDIs;
import javax.ejb.*;
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.util.*;

/**
 * This is the bean class for the JudgeDetailBean enterprise bean.
 * Created Aug 29, 2006 7:27:54 PM
 * @author suresh
 */
public class HLCJudgeDetailBean implements EntityBean, HLCJudgeDetailLocalBusiness {
    private EntityContext context;
    private String  judgeId;
    private String eventId;
    private String judgeTypeId;
    private String judgeNames;
    private Connection con;
    
    // getters
    public String getJudgeId() {
        return judgeId;
    }
    
    public String getEventId() {
        return eventId;
    }
    
    public String getJudgeTypeId() {
        return judgeTypeId;
    }
    
    public String getJudgeNames() {
        return judgeNames;
    }

    //setter
    public void setJudgeId(String judgeId) {
        this.judgeId = judgeId;
    }
    
    public void setEventId(String eventId) {
        this.eventId = eventId;
    }
    
    public void setJudgeTypeId(String judgeTypeId) {
        this.judgeTypeId = judgeTypeId;
    }
    
    public void setJudgeNames(String judgeNames) {
        this.judgeNames = judgeNames;
    }

        
   
    public String ejbCreate(String eventId,String judgeTypeId,String judgeNames) throws CreateException{
        Debug.print("JudgeDetailBean ejbCreate");
        this.eventId   = eventId;
        this.judgeTypeId = judgeTypeId;
        this.judgeNames = judgeNames;
        try {
            insertRowJudgeDetails();
        } catch (Exception ex) {
            throw new EJBException("ejbCreate: " + ex.getMessage());
        }
        Debug.print("Primary Key: After Insertion" + judgeId);
        return  judgeId;
    }
    
    public void ejbPostCreate(String eventId,String judgeTypeId,String judgeNames) throws CreateException{
        Debug.print("JudgeDetailBean ejbPostCreate");
    }
    
    public void setEntityContext(EntityContext aContext) {
        context = aContext;
    }
    
    public void ejbActivate() {
        Debug.print("JudgeDetailBean ejbActivate");
        judgeId = (String)context.getPrimaryKey();
    }
    
    public void ejbPassivate() {
        Debug.print("JudgeDetailBean ejbPassivate");
        judgeId = "";   
    }
    
    public void ejbRemove() {
        Debug.print("JudgeDetailBean ejbRemove");

        try {
            deleteRow(judgeId);
        } catch (Exception ex) {
            throw new EJBException("ejbRemove: " + ex.getMessage());
        }
    }
       
    public void unsetEntityContext() {
         Debug.print("JudgeDetailBean unsetEntityContext");
        context = null;
    }
    
    public void ejbLoad() { 
        Debug.print("JudgeDetailBean ejbLoad");
        try {
            loadJudgeDetails();
        } catch (Exception ex) {
            throw new EJBException("ejbLoad: " + ex.getMessage());
        }
    }
    
    public void ejbStore() {
        Debug.print("JudgeDetailBean ejbStore");

        try {
            storeJudgeDetails();
        } catch (Exception ex) {
            throw new EJBException("ejbStore: " + ex.getMessage());
        }
    }
     
   public String ejbFindByPrimaryKey(String judgeId) throws FinderException {
        Debug.print("JudgeDetailBean ejbFindByPrimaryKey");

        boolean result;

        try {
            result = selectByPrimaryKey(judgeId);
        } catch (Exception ex) {
            throw new EJBException("ejbFindByPrimaryKey: " + ex.getMessage());
        }

        if (result) {
            return judgeId;
        } else {
            throw new ObjectNotFoundException("Row for id " + judgeId + " not found.");
        }
    }
       /*********************** Database Routines *************************/
/**
  * @Method Name    :selectByPrimaryKey.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :String judgeId.
  * @return         :boolean value.
  * @throws         :SQLException.
  */
  private boolean selectByPrimaryKey(String judgeId) throws SQLException {
        Debug.print("JudgeDetailBean selectByPrimaryKey:" + judgeId);
        boolean result = false;          
        makeConnection();
        try {
            String selectStatement = "SELECT judge_id from " + DBHelper.USEA_MRO_JUDGE_DETAILS  + " WHERE judge_id = ?";
            PreparedStatement prepStmt = con.prepareStatement(selectStatement);
            prepStmt.setString(1, judgeId);

            ResultSet rs = prepStmt.executeQuery();
            result = rs.next();
            prepStmt.close();
            releaseConnection();
            Debug.print("JudgeDetailBean selectByPrimaryKey" + result);
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in selectByPrimaryKey:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in selectByPrimaryKey:" + e.getMessage());
        }
         return result;
    }
    
/**
  * @Method Name    :ejbFindByAll.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :Collection value.
  * @throws         :FinderException.
  */  
  public Collection ejbFindByAll() throws FinderException {
        Debug.print("JudgeDetailBean ejbFindAll");
        Vector dimList = new Vector();
        makeConnection();
   	try {
            String selectStatement = "select judge_id from " + DBHelper.USEA_MRO_JUDGE_DETAILS ;
            PreparedStatement prepStmt = con.prepareStatement(selectStatement);
            ResultSet rs = prepStmt.executeQuery();
            while (rs.next()){
                dimList.addElement(rs.getString(1));
            }
            rs.close();
            prepStmt.close();
            releaseConnection();
        } 
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in ejbFindByAll:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in ejbFindByAll:" + e.getMessage());
        }
        return dimList;
}

/**
  * @Method Name    :ejbFindByEventId.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :String eventId.
  * @return         :Collection value.
  * @throws         :FinderException.
  */   
  public Collection ejbFindByEventId(String eventId) throws FinderException{
         Debug.print("JudgeDetailBean ejbFindByEventId");
        Vector eventList = new Vector();
        makeConnection();
   	try {
            String selectStatement = "select judge_id from " + DBHelper.USEA_MRO_JUDGE_DETAILS + " where event_id = ?";
            PreparedStatement prepStmt = con.prepareStatement(selectStatement);
            prepStmt.setFloat(1,Float.parseFloat(eventId));
            ResultSet rs = prepStmt.executeQuery();
            while (rs.next()){
                eventList.addElement(rs.getString(1));
            }
            rs.close();
            prepStmt.close();
            releaseConnection();
        } 
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in ejbFindByEventId:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in ejbFindByEventId:" + e.getMessage());
        }
        return eventList;
  }
   
/**
  * @Method Name    :getNextId.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :String value.
  * @throws         :SQLException ,MissingPrimaryKeyException.
  */  
  private String getNextId() throws SQLException ,HLCMissingPrimaryKeyException {
        Debug.print("JudgeDetailBean getNextId");
        makeConnection();
        String nextId = null;
        try{
            String selectStatement = "select newid() as judgeId";
            Debug.print("JudgeDetailBean getNextId:" + selectStatement);
            PreparedStatement prepSelect = con.prepareStatement(selectStatement);
            ResultSet rs = prepSelect.executeQuery();
            rs.next();
            nextId = rs.getString(1);
            rs.close();
            prepSelect.close();
            releaseConnection();
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in getNextId:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in getNextId:" + e.getMessage());
        }        
        return nextId;
    }

/**
  * @Method Name    :insertRowJudgeDetails.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :void value.
  * @throws         :SQLException ,MissingPrimaryKeyException.
  */   
  private void insertRowJudgeDetails() throws SQLException,HLCMissingPrimaryKeyException {
        Debug.print("JudgeDetailBean insertRowJudgeDetails");
        
        this.judgeId = getNextId();
        
        makeConnection();
        try{
            String insertStatement =
                "insert into " + DBHelper.USEA_MRO_JUDGE_DETAILS  + "(judge_id, event_id, judge_type_id, judge_names) " +
                 " values ( ? , ? , ? , ?)";
            PreparedStatement prepStmt = con.prepareStatement(insertStatement);
            prepStmt.setString(1, judgeId);
            prepStmt.setInt(2, Integer.parseInt(eventId));
            prepStmt.setString(3, judgeTypeId);
            prepStmt.setString(4, judgeNames);
           
            prepStmt.executeUpdate();
            prepStmt.close();
            releaseConnection();
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in insertRowJudgeDetails:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in insertRowJudgeDetails:" + e.getMessage());
        }        
    }

/**
  * @Method Name    :loadJudgeDetails.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :void value.
  * @throws         :SQLException.
  */   
  private void loadJudgeDetails() throws SQLException {
        Debug.print("JudgeDetailBean loadJudgeDetails");
        judgeId = (String)context.getPrimaryKey();

        Debug.print("JudgeDetailBean loadJudgeDetails Primary Key:" + judgeId );
        makeConnection();
        try{
            String selectStatement =
                "select event_id, judge_type_id, judge_names from " + DBHelper.USEA_MRO_JUDGE_DETAILS  + " where judge_id = ? ";
            PreparedStatement prepStmt = con.prepareStatement(selectStatement);
            prepStmt.setString(1, judgeId);
            ResultSet rs = prepStmt.executeQuery();
            if (rs.next()) {
                this.eventId = rs.getString(1);
                this.judgeTypeId = rs.getString(2);
                this.judgeNames = rs.getString(3);
            
                prepStmt.close();
                releaseConnection();
            } else {
                prepStmt.close();
                releaseConnection();
                throw new NoSuchEntityException("Row for id " + judgeId + " not found in database.");
            }
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in loadJudgeDetails:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in loadJudgeDetails:" + e.getMessage());
        }        
    }
    
/**
  * @Method Name    :storeJudgeDetails.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :void value.
  * @throws         :SQLException.
  */  
  private void storeJudgeDetails() throws SQLException {
        Debug.print("JudgeDetailBean storeJudgeDetails");
        makeConnection();
        try{
            String updateStatement =
                    "update " + DBHelper.USEA_MRO_JUDGE_DETAILS  + " set event_id = ? , judge_type_id = ?, " + 
                    " judge_names = ?  where judge_id = ? ";
            PreparedStatement prepStmt = con.prepareStatement(updateStatement);
           
            prepStmt.setInt(1, Integer.parseInt(eventId));
            prepStmt.setString(2, judgeTypeId);
            prepStmt.setString(3, judgeNames);
            prepStmt.setString(4, judgeId);
            
            int rowCount = prepStmt.executeUpdate();
            Debug.print("Sucessfully Updated." + rowCount);
            prepStmt.close();
            releaseConnection();
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in storeJudgeDetails:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in storeJudgeDetails:" + e.getMessage());
        }        
    }
   
/**
  * @Method Name    :deleteRow.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :String judgeId.
  * @return         :void value.
  * @throws         :SQLException.
  */  
  private void deleteRow(String judgeId) throws SQLException {
         Debug.print("JudgeDetailBean deleteRow");

        makeConnection();
        try{
            String deleteStatement = "delete from " + DBHelper.USEA_MRO_JUDGE_DETAILS  + "  where judge_id = ? ";
            PreparedStatement prepStmt = con.prepareStatement(deleteStatement);

            prepStmt.setString(1, judgeId);
            prepStmt.executeUpdate();
            prepStmt.close();
            releaseConnection();
        }
        catch(SQLException sql){
            releaseConnection();
            throw new EJBException("SQL Exception in deleteRow:" + sql.getMessage());
        }
        catch(Exception e){
            releaseConnection();
            throw new EJBException("General Exception  in deleteRow:" + e.getMessage());
        }        

    }

/**
  * @Method Name    :makeConnection.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :void value.
  * @throws         :Null.
  */   
       private void makeConnection() {
            Debug.print("JudgeDetailBean : makeConnection");
            try {
                InitialContext ic = new InitialContext();
                DataSource ds = (DataSource) ic.lookup(HLCEJBAllJNDIs.USEA_DB);
                con = ds.getConnection();
            } catch (Exception ex) {
                throw new EJBException("Unable to connect to database. " + ex.getMessage());
            }
        }

/**
  * @Method Name    :releaseConnection.
  * @Description    :This method will create new privilege. If the Privilege Name already exist it will return.
  * @param          :Null.
  * @return         :void value.
  * @throws         :Null.
  */        
      private void releaseConnection() {
        Debug.print("JudgeDetailBean releaseConnection");
        try {
            con.close();
        } catch (SQLException ex) {
            throw new EJBException("releaseConnection: " + ex.getMessage());
        }
      }
}
