<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to configure Red Hat OpenShift 4 to use Auth0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RD4GynQWRao/" /><category term="Kubernetes" /><category term="OpenShift" /><category term="Red Hat OpenShift Container Platform" /><category term="Cluster" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=634797</id><updated>2019-10-09T07:00:56Z</updated><published>2019-10-09T07:00:56Z</published><content type="html">&lt;p&gt;My colleague and I recently had to stand up a &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift 4&lt;/a&gt; cluster for a customer to determine how difficult it would be for them to port their application. Although they could have achieved a similar outcome with &lt;a href="https://developers.redhat.com/blog/2019/09/05/red-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers/"&gt;CodeReady Containers&lt;/a&gt;, their local development machines did not have enough resources (8GB RAM minimum, which is one problem of developing on tablets).&lt;/p&gt; &lt;p&gt;To reduce the overhead of adding and removing users from the project during the trial, we decided to skip over the simple HTPasswd provider and use the OAuth provider backed by Auth0. We also wanted to publish our guide to make it easier for others to adopt a similar deployment.&lt;span id="more-634797"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This article outlines how to configure Red Hat OpenShift 4.x to use Auth0 as an OAuth2 provider. It assumes you already have a running OpenShift cluster and an Auth0 account.&lt;/p&gt; &lt;h2&gt;Auth0 steps&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Log in to the Auth0 management console.&lt;/li&gt; &lt;li&gt;Select &lt;em&gt;Applications&lt;/em&gt; from the side menu.&lt;/li&gt; &lt;li&gt;Select &lt;em&gt;Create&lt;/em&gt; application and choose &lt;em&gt;Regular Web Applications&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Click settings: &lt;ul&gt; &lt;li&gt;Record the client secret.&lt;/li&gt; &lt;li&gt;Record the client id.&lt;/li&gt; &lt;li&gt;Record the domain.&lt;/li&gt; &lt;li&gt;Set the callback URL of your OpenShift Cluster. The name at the end is named you provide the identity provider in OpenShift, then click submit. For example: https://oauth-openshift.apps.ocp.example.com/oath2callback/auth0&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Example&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-634987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/auth0-1024x674.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/auth0.gif" alt="" width="1024" height="674" /&gt;&lt;/p&gt; &lt;h3&gt;OpenShift steps&lt;/h3&gt; &lt;p&gt;Now you can configure Red Hat OpenShift:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Log in to OpenShift with the &lt;strong&gt;kubeadmin&lt;/strong&gt; account.&lt;/li&gt; &lt;li&gt;Select &lt;em&gt;Administration &amp;#62; Cluster Settings&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Select &lt;em&gt;Global Configuration &amp;#62; Oauth.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Scroll down to &lt;em&gt;Identity Providers&lt;/em&gt; and select &lt;em&gt;Add &amp;#62; OpenID Connect&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Complete the form as follows. If you change the name make sure you update the callback within Auth0: &lt;ul&gt; &lt;li&gt;name: auth0&lt;/li&gt; &lt;li&gt;Client ID: &amp;#60;your client id&amp;#62;&lt;/li&gt; &lt;li&gt;Client Secret: &amp;#60;your client seceret&amp;#62;&lt;/li&gt; &lt;li&gt;Issuer URL: &amp;#60;your domain for auth0 &amp;#8211; e.g. https://ocpdemo.au.auth0.com&amp;#62;&lt;/li&gt; &lt;li&gt;Preferred Username: email&lt;/li&gt; &lt;li&gt;Name: nickname&lt;/li&gt; &lt;li&gt;Email: email&lt;/li&gt; &lt;li&gt;Extra Scopes: email, profile, nickname&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Click Add&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now when you browse to the OpenShift login page, you will see Auth0 as a login provider.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-634847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login-1024x542.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login-1024x542.png" alt="" width="640" height="339" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login-1024x542.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login-300x159.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login-768x407.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/05-Login.png 1548w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Thank you to James Ryles for helping with this configuration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#38;linkname=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fhow-to-configure-red-hat-openshift-4-to-use-auth0%2F&amp;#038;title=How%20to%20configure%20Red%20Hat%20OpenShift%204%20to%20use%20Auth0" data-a2a-url="https://developers.redhat.com/blog/2019/10/09/how-to-configure-red-hat-openshift-4-to-use-auth0/" data-a2a-title="How to configure Red Hat OpenShift 4 to use Auth0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/09/how-to-configure-red-hat-openshift-4-to-use-auth0/"&gt;How to configure Red Hat OpenShift 4 to use Auth0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RD4GynQWRao" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;My colleague and I recently had to stand up a Red Hat OpenShift 4 cluster for a customer to determine how difficult it would be for them to port their application. Although they could have achieved a similar outcome with CodeReady Containers, their local development machines did not have enough resources (8GB RAM minimum, which [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/09/how-to-configure-red-hat-openshift-4-to-use-auth0/"&gt;How to configure Red Hat OpenShift 4 to use Auth0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">634797</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2019-10-09T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/09/how-to-configure-red-hat-openshift-4-to-use-auth0/</feedburner:origLink></entry><entry><title>What is Red Hat Universal Base Image?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/j2-Fe_M5SJQ/" /><category term="Red Hat Enterprise Linux" /><category term="Universal Base Images (UBI)" /><category term="UBI" /><author><name>Scott McCarty (fatherlinux)</name></author><id>https://developers.redhat.com/blog/?p=636067</id><updated>2019-10-09T07:00:32Z</updated><published>2019-10-09T07:00:32Z</published><content type="html">&lt;p&gt;Back in May, we &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;launched the Red Hat Universal Base Image (UBI)&lt;/a&gt;, targeted at developers building containerized applications for the cloud. Since then, we have published an &lt;a href="https://developers.redhat.com/articles/ubi-faq/#resources"&gt;extensive FAQ&lt;/a&gt; covering topics ranging from how often UBI is updated, to how the end user license agreement (EULA) allows you to redistribute applications built on it. These are all great fundamental topics to cover, but people still seem to have a lot of questions around what UBI is and what it isn’t.&lt;/p&gt; &lt;p&gt;If you are a developer and you are trying to figure out whether UBI is right for you, it might be easier to start by first explaining what it isn’t. Red Hat Universal Base Image is:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Not free Red Hat Enterprise Linux (RHEL).&lt;/strong&gt; You should not build your application on a RHEL base image first, then try and move it to UBI and expect it to work. That’s an anti-pattern.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Not a replacement for Fedora.&lt;/strong&gt; UBI is not a place to drive new operating system development or a platform on which to develop new packages for RHEL.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Not a replacement for CentOS.&lt;/strong&gt; UBI is RHEL. It’s not a downstream rebuild. When it runs on RHEL, or CoreOS (in &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;), it is supported as RHEL.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now, let’s talk about what UBI is:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;A vehicle for building and delivering certified containers and operators.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Use case based.&lt;/strong&gt; UBI is targeted toward high-level application developers, programming in languages like .NET, Golang, Node.js, Perl, PHP, Python, and Ruby.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;High quality. &lt;/strong&gt; It has the same quality guarantees as Red Hat Enterprise Linux. UBI is released and patched on the RHEL schedule with RHEL. It’s tested by the same performance, security and quality teams as RHEL.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Redistributable under a different end user license agreement (EULA) than traditional RHEL.&lt;/strong&gt; Traditional RHEL packages (RPMs) and container images have been restricted by the RHEL EULA.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Vehicle for building and delivering certified containers and 0perators&lt;/h2&gt; &lt;p&gt;UBI makes it easy for ISVs to build and deliver certified container images for RHEL and certified &lt;a href="https://www.openshift.com/learn/topics/operators"&gt;Operators&lt;/a&gt; for OpenShift. This is a key value proposition for customers that want joint support from both the software vendor and the container platform vendor.&lt;/p&gt; &lt;p&gt;UBI frees developers to work with high-quality container images on their laptops, desktops, and CI/CD systems, even if they don’t run RHEL or OpenShift. This also allows ISVs and Red Hat partners to redistribute their applications on UBI. When the application lands on a supported environment (RHEL or OpenShift), Red Hat will support it. If you are a Red Hat ISV partner, and are looking for a way to deliver higher quality support to our joint customers, check out the &lt;a href="https://connect.redhat.com/"&gt;Partner Connect Program&lt;/a&gt;; it’s free.&lt;/p&gt; &lt;h2&gt;Use case based: UBI is for containerized cloud-native applications&lt;/h2&gt; &lt;p&gt;As mentioned earlier, UBI should not be thought of as free Red Hat Enterprise Linux. UBI is targeted for specific use cases, not the wide variety of use cases that RHEL  can address. Today, the UBI use cases include developers looking to develop containerized, cloud-native applications based on popular languages like .NET, Golang, Node.js, Perl, PHP, Python, and Ruby.&lt;/p&gt; &lt;p&gt;We are taking a hard look at expanding to a few other use cases including C/C++ development, container image builders, and RPM package builders, but today, it’s only designed for cloud-native application development, and should not be treated as free RHEL or a replacement for CentOS.&lt;/p&gt; &lt;h2&gt;High quality: The security and operational benefits of RHEL&lt;/h2&gt; &lt;p&gt;If you want to get to production faster, build on high-quality base images. Building on UBI is like building on RHEL so you will spend less time convincing security teams and operations teams that the random image you chose off of the internet is secure. See also: &lt;a href="https://developers.redhat.com/blog/2016/05/18/3-reasons-i-should-build-my-containerized-applications-on-rhel-and-openshift/"&gt;3 Reasons I Should Build My Containerized Applications on RHEL and OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Since UBI is Red Hat Enterprise Linux, it follows the same &lt;a href="https://access.redhat.com/support/policy/updates/ubi"&gt;enterprise content availability&lt;/a&gt; schedule as RHEL. This means that you can build your containerized application on UBI, manage it with CI/CD based builds, and continue to receive updates for the packages in UBI for the same lifecycle as RHEL. Stated another way, you can focus on your application, instead of fixing packages in the underlying container image. Fewer CI/CD testing faults means more time to focus on new projects.&lt;/p&gt; &lt;h2&gt;Redistributable&lt;/h2&gt; &lt;p&gt;Red Hat Enterprise Linux has always had an end user license agreement that prevented users who signed it from redistributing RHEL. This extended to the RPMs in RHEL, and the container images. This EULA was necessary to govern the relationship between Red Hat and it’s customers. This ensured that customers had a subscription for every active RHEL server allowing Red Hat support to quickly provide customers with help if they needed it. This worked well in traditional server environments, where companies typically measure support by installed servers.&lt;/p&gt; &lt;p&gt;UBI has a different end user license agreement (EULA) than RHEL. This means that users can pull it down, build an application on it, open source or proprietary, and redistribute that application wherever and however they want.  When that UBI images lands on RHEL or OpenShift, it is supported just like RHEL. The entitlement for UBI comes from the host, not the container image. This works well in cloud-based environments, and developer environments where containers are not always run on supported container hosts (e.g., CI/CD services, etc).&lt;/p&gt; &lt;h2&gt;Check out Red Hat Universal Base Image&lt;/h2&gt; &lt;p&gt;If you are building new applications, you should check out Red Hat Universal Base Image. It can be thought of as a use-case based, redistributable version of RHEL. This gives you all of the advantages of a RHEL base image, without the EULA restrictions on redistribution.&lt;/p&gt; &lt;p&gt;Check out all of the UBI based images that are available on the &lt;a href="https://access.redhat.com/containers/#/product/5c180b28bed8bd75a2c29a63"&gt;UBI Product Page&lt;/a&gt; on the Red Hat Container Catalog. Download a trusted image from a trusted source.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#38;linkname=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F09%2Fwhat-is-red-hat-universal-base-image%2F&amp;#038;title=What%20is%20Red%20Hat%20Universal%20Base%20Image%3F" data-a2a-url="https://developers.redhat.com/blog/2019/10/09/what-is-red-hat-universal-base-image/" data-a2a-title="What is Red Hat Universal Base Image?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/09/what-is-red-hat-universal-base-image/"&gt;What is Red Hat Universal Base Image?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/j2-Fe_M5SJQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Back in May, we launched the Red Hat Universal Base Image (UBI), targeted at developers building containerized applications for the cloud. Since then, we have published an extensive FAQ covering topics ranging from how often UBI is updated, to how the end user license agreement (EULA) allows you to redistribute applications built on it. These [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/09/what-is-red-hat-universal-base-image/"&gt;What is Red Hat Universal Base Image?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">636067</post-id><dc:creator>Scott McCarty (fatherlinux)</dc:creator><dc:date>2019-10-09T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/09/what-is-red-hat-universal-base-image/</feedburner:origLink></entry><entry><title>DevNation Live Bengaluru: Sail into cloud — An introduction to Istio</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hl60pgsUB7I/" /><category term="DevNation" /><category term="Kubernetes" /><category term="Service Mesh" /><category term="DevNation Live" /><category term="istio" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=623707</id><updated>2019-10-08T07:00:29Z</updated><published>2019-10-08T07:00:29Z</published><content type="html">&lt;p&gt;Our first &lt;a href="https://developers.redhat.com/devnationlive-india/"&gt;DevNation Live regional event was held in Bengaluru, India&lt;/a&gt; in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists.&lt;/p&gt; &lt;p&gt;In this session, &lt;a href="https://developers.redhat.com/blog/author/kameshsampath/"&gt;Kamesh Sampath&lt;/a&gt; provides an overview of Envoy and &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt;, two open source projects that will change the way you write cloud-native Java applications on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. We&amp;#8217;ll show how to download and set up Istio on your local laptop, then deploy Java microservices as part of the &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio service mesh&lt;/a&gt; with Istio sidecar proxy.&lt;span id="more-623707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/jApuDhvsG_Q" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us at an upcoming&lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt; &lt;span style="font-weight: 400;"&gt;developer event&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and see our collection of&lt;/span&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; &lt;span style="font-weight: 400;"&gt;past DevNation Live tech talks&lt;/span&gt;&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F08%2Fdevnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio%2F&amp;#038;title=DevNation%20Live%20Bengaluru%3A%20Sail%20into%20cloud%20%E2%80%94%20An%20introduction%20to%20Istio" data-a2a-url="https://developers.redhat.com/blog/2019/10/08/devnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio/" data-a2a-title="DevNation Live Bengaluru: Sail into cloud — An introduction to Istio"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/08/devnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio/"&gt;DevNation Live Bengaluru: Sail into cloud — An introduction to Istio&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hl60pgsUB7I" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Our first DevNation Live regional event was held in Bengaluru, India in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists. In this session, Kamesh Sampath provides an overview of Envoy and Istio, two open source projects that will change the way you write cloud-native Java [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/08/devnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio/"&gt;DevNation Live Bengaluru: Sail into cloud — An introduction to Istio&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">623707</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-10-08T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/08/devnation-live-bengaluru-sail-into-cloud-an-introduction-to-istio/</feedburner:origLink></entry><entry><title>Software Transactional Memory with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mTQGdyBxHUY/software-transactional-memory-with.html" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><category term="STM transactions &quot;software transactional memory&quot;" scheme="searchisko:content:tags" /><author><name>Michael Musgrove</name></author><id>searchisko:content:id:jbossorg_blog-software_transactional_memory_with_quarkus</id><updated>2019-10-07T10:30:22Z</updated><published>2019-10-07T09:57:00Z</published><content type="html">We have recently contributed a &lt;a href="https://github.com/quarkusio/quarkus/tree/master/extensions/narayana-stm"&gt;quarkus extension called quarkus-narayana-stm&lt;/a&gt; which simplifies the use of STM in your microservices.&lt;br /&gt;&lt;br /&gt;It will be available in the&amp;nbsp;0.24.0 quarkus release. If you would like to experiment with it before this release then you can either take one of the &lt;a href="https://oss.sonatype.org/content/repositories/snapshots/io/quarkus/quarkus-narayana-stm/"&gt;nightly builds&lt;/a&gt;&amp;nbsp;or you can build it locally by git cloning the &lt;a href="https://github.com/quarkusio/quarkus"&gt;quarkus repo&lt;/a&gt; and then run the build. This will add the io.quarkus:quarkus-narayana-stm:999-SNAPSHOT maven dependency to your local maven repository and you may then get started by &lt;a href="https://github.com/quarkusio/quarkus/blob/master/docs/src/main/asciidoc/stm-guide.adoc#using-software-transactional-memory-in-quarkus"&gt;following the guide&lt;/a&gt;. There is also a &lt;a href="https://github.com/quarkusio/quarkus-quickstarts/tree/development/using-software-transactional-memory"&gt;quickstart&lt;/a&gt; that provides a worked example of how to use it in your microservices. The example shows how to manage concurrent accesses to a single counter. More sophisticated usage patterns are the norm but this simple example does give a flavour of how easy it is to manage concurrency with the Narayana STM implementation.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mTQGdyBxHUY" height="1" width="1" alt=""/&gt;</content><summary>We have recently contributed a quarkus extension called quarkus-narayana-stm which simplifies the use of STM in your microservices. It will be available in the 0.24.0 quarkus release. If you would like to experiment with it before this release then you can either take one of the nightly builds or you can build it locally by git cloning the quarkus repo and then run the build. This will add the io....</summary><dc:creator>Michael Musgrove</dc:creator><dc:date>2019-10-07T09:57:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2019/10/software-transactional-memory-with.html</feedburner:origLink></entry><entry><title>Upcoming Tech Event in Copenhagen - What does the system integration toolbox anno 2019 looks like</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6vWz0qFPLZM/upcoming-tech-event-in-copenhagen-what.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-upcoming_tech_event_in_copenhagen_what_does_the_system_integration_toolbox_anno_2019_looks_like</id><updated>2019-10-07T09:10:54Z</updated><published>2019-10-07T09:10:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;On October 24th 2019, I am presenting at a full day tech event in Copenhagen.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-gsf8JudinqE/XZr-Q9FgLcI/AAAAAAAAB_8/OCD7rmJW_SMXcfpkDDyu7HGuj65h89MrgCLcBGAsYHQ/s1600/Screenshot%2B2019-10-07%2Bat%2B10.58.34.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="242" data-original-width="640" height="151" src="https://1.bp.blogspot.com/-gsf8JudinqE/XZr-Q9FgLcI/AAAAAAAAB_8/OCD7rmJW_SMXcfpkDDyu7HGuj65h89MrgCLcBGAsYHQ/s400/Screenshot%2B2019-10-07%2Bat%2B10.58.34.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;My session is the first of the day, with a total of 90 minutes covering all the latest about &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; 3, Camel K, and Camel Quarkus. I will have up to date slides, and demos ready for the talk.&lt;br /&gt;&lt;br /&gt;The event also hosts other speakers such as &lt;a href="https://www.linkedin.com/in/jeppecramon/"&gt;Jeppe Cramon&lt;/a&gt; whom will talk about EDA and microservices. And I have been told that we should look forward to Syed Shaaf's session where he has a big tech demo with many moving parts.&lt;br /&gt;&lt;br /&gt;In the afternoon you can choose to listen to breakout sessions or attend a full 2,5 hours hands-on workshop. The breakout sessions will among others cover use-cases with Apache Camel and Apache Kafka from the real world.&lt;br /&gt;&lt;br /&gt;You can find more details about the &lt;a href="https://techevent.nemtilmeld.dk/1/"&gt;event, the location, and how to register here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Hope to see you there.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Cloud-native integration with Apache Camel on Kubernetes&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Cloud-native applications of the future will consist of hybrid workloads: stateful applications, batch jobs, microservices, and functions, wrapped as Linux containers and deployed via Kubernetes on any cloud.&lt;br /&gt;&lt;br /&gt;In this session, we will explore key challenges with function interactions and coordination, addressing these problems using Enterprise Integration Patterns (EIP) and modern approaches with the latest innovations from the Apache Camel community:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Apache Camel 3&lt;/li&gt;&lt;li&gt;Camel K&lt;/li&gt;&lt;li&gt;Camel Quarkus&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Apache Camel is the Swiss army knife of integration, and the most powerful integration framework. In this session you will hear about the latest features in the brand new 3rd generation.&lt;br /&gt;&lt;br /&gt;Camel K, is a lightweight integration platform that enables Enterprise Integration Patterns to be used natively on any Kubernetes cluster. When used in combination with Knative, a framework that adds serverless building blocks to Kubernetes, and the subatomic execution environment of Quarkus, Camel K can mix serverless features such as auto-scaling, scaling to zero, and event-based communication with the outstanding integration capabilities of Apache Camel.&lt;br /&gt;&lt;br /&gt;We will show how Camel K works. We'll also use examples to demonstrate how Camel K makes it easier to connect to cloud services or enterprise applications using some of the 300 components that Camel provides.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=e0aFHdQJ8Bc:G8Dc_cD3G6U:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=e0aFHdQJ8Bc:G8Dc_cD3G6U:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=e0aFHdQJ8Bc:G8Dc_cD3G6U:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=e0aFHdQJ8Bc:G8Dc_cD3G6U:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=e0aFHdQJ8Bc:G8Dc_cD3G6U:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=e0aFHdQJ8Bc:G8Dc_cD3G6U:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=e0aFHdQJ8Bc:G8Dc_cD3G6U:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/e0aFHdQJ8Bc" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6vWz0qFPLZM" height="1" width="1" alt=""/&gt;</content><summary>On October 24th 2019, I am presenting at a full day tech event in Copenhagen. My session is the first of the day, with a total of 90 minutes covering all the latest about Apache Camel 3, Camel K, and Camel Quarkus. I will have up to date slides, and demos ready for the talk. The event also hosts other speakers such as Jeppe Cramon whom will talk about EDA and microservices. And I have been told th...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-10-07T09:10:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/e0aFHdQJ8Bc/upcoming-tech-event-in-copenhagen-what.html</feedburner:origLink></entry><entry><title>Write a simple Kubernetes Operator in Java using the Fabric8 Kubernetes Client</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mdfzoBvaF-s/" /><category term="Developer Tools" /><category term="Java" /><category term="Kubernetes" /><category term="Red Hat OpenShift Container Platform" /><category term="Kubernetes Operator" /><author><name>Rohan Kumar</name></author><id>https://developers.redhat.com/blog/?p=632117</id><updated>2019-10-07T07:00:49Z</updated><published>2019-10-07T07:00:49Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt; is becoming much more than just a platform for running container workloads. Its API can be extended with application-specific Custom Resource Definitions(CRDs), and you can implement your own logic adapting your applications dynamically to changes in the cluster. In this article, we&amp;#8217;ll be writing a simple Kubernetes Operator in &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; using the &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client&lt;/a&gt;. &lt;span id="more-632117"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is a Kubernetes Operator?&lt;/h2&gt; &lt;p&gt;Kubernetes Operators are software extensions to Kubernetes that make use of &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"&gt;Custom Resources&lt;/a&gt; to manage applications and their components. They let you extend the cluster’s behavior without modifying the code of Kubernetes itself. They are just clients of the Kubernetes API, which act as controllers of that Custom Resource.&lt;/p&gt; &lt;p&gt;In simple terms, a Kubernetes Operator is code that makes use of the Kubernetes API to execute some tasks; Custom Resources act as a configuration model on which that specific code acts.&lt;/p&gt; &lt;h2&gt;Writing a simple PodSet Operator in Java&lt;/h2&gt; &lt;h3&gt;PodSet Custom Resource&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll be writing a very simple operator that tries to do something similar to a &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"&gt;ReplicaSet&lt;/a&gt;. All the code is hosted on &lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava"&gt;GitHub&lt;/a&gt;. It tries to main exactly x amount of pods as with it as a parent. For that, we&amp;#8217;ll use a very simple Custom Resource called &lt;code&gt;PodSet&lt;/code&gt;. Here is its custom resource definition:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/resources/crd.yaml"&gt;&lt;img class=" size-full wp-image-633107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-10-12.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-10-12.png" alt="" width="665" height="303" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-10-12.png 665w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-10-12-300x137.png 300w" sizes="(max-width: 665px) 100vw, 665px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;With this Custom Resource Definition applied, A simple &lt;code&gt;PodSet&lt;/code&gt; resource can be written as:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/resources/cr.yaml"&gt;&lt;img class=" size-full wp-image-633117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-11-22.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-11-22.png" alt="" width="531" height="170" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-11-22.png 531w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-11-22-300x96.png 300w" sizes="(max-width: 531px) 100vw, 531px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Writing Operator&lt;/h3&gt; &lt;p&gt;Now let’s jump to writing the operator and have a look at the project structure:&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-12-50.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-12-50.png" alt="" width="869" height="812" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-12-50.png 869w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-12-50-300x280.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-12-50-768x718.png 768w" sizes="(max-width: 869px) 100vw, 869px" /&gt;&lt;/p&gt; &lt;p&gt;From the structure, we can see three things:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code&gt;PodSet&lt;/code&gt;, &lt;code&gt;PodSetList&lt;/code&gt;, &lt;code&gt;PodSetSpec&lt;/code&gt;, &lt;code&gt;PodSetStatus&lt;/code&gt;, &lt;code&gt;DoneablePodSet&lt;/code&gt; as model classes for &lt;code&gt;PodSet&lt;/code&gt; custom resources, which are required for deserializing Kubernetes API responses into objects.&lt;/li&gt; &lt;li&gt;&lt;code&gt;PodSetOperatorMain&lt;/code&gt;, which is the main driver class of the project.&lt;/li&gt; &lt;li&gt;&lt;code&gt;PodSetController&lt;/code&gt; Class, which contains main Kubernetes logic related to the operator.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Let’s look at each of these in detail.&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/6074349.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/6074349.png" alt="" width="191" height="191" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/6074349.png 200w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/6074349-150x150.png 150w" sizes="(max-width: 191px) 100vw, 191px" /&gt;&lt;/p&gt; &lt;p&gt;First, to interact with Kubernetes API in Java, we need the &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client&lt;/a&gt;. It’s one of the most popular Java APIs for interacting with Kubernetes. We need to add that in pom.xml.&lt;/p&gt; &lt;p&gt;Here is how our pom.xml would look after adding Fabric8 client as a dependency:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/pom.xml"&gt;&lt;img class=" size-full wp-image-633147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14-1024x429.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14.png" alt="" width="1581" height="662" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14.png 1581w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14-300x126.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14-768x322.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-15-14-1024x429.png 1024w" sizes="(max-width: 1581px) 100vw, 1581px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once all the necessary dependencies are added, (which, in our case, is just one &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f642.png" alt="&#x1f642;" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; ), we can then write POJOs, which would be needed by our Java client to create a client for our &lt;code&gt;PodSet&lt;/code&gt; custom resource. Here&amp;#8217;s how some of them would look after adding them to the project:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/crd/PodSet.java"&gt;&lt;b&gt;PodSet.java&lt;/b&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-17-02.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-17-02.png" alt="" width="587" height="733" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-17-02.png 484w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-17-02-240x300.png 240w" sizes="(max-width: 587px) 100vw, 587px" /&gt;&lt;b&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/crd/PodSetList.java"&gt;PodSetList.java&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-18-17.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-18-17.png" alt="" width="655" height="102" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-18-17.png 655w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-18-17-300x47.png 300w" sizes="(max-width: 655px) 100vw, 655px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/crd/PodSetSpec.java"&gt;PodSetSpec.java&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-19-24.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-19-24.png" alt="" width="682" height="522" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-19-24.png 682w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-19-24-300x230.png 300w" sizes="(max-width: 682px) 100vw, 682px" /&gt;&lt;/p&gt; &lt;p&gt;Once we have added the model classes, we can go ahead and begin writing our operator. Let’s start with the main driving class (i.e., &lt;code&gt;PodSetOperatorMain&lt;/code&gt;), which would call all the necessary functions in the &lt;code&gt;PodSetController&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;First, we need to initialize informers for both &lt;code&gt;Pod&lt;/code&gt; resource and &lt;code&gt;PodSet&lt;/code&gt; resource, because we&amp;#8217;ll be listening to events related to these resources and reacting upon them in our operator. To stay informed about when these events get triggered, we&amp;#8217;ll use a primitive exposed by Kubernetes and the client-go (now added in Fabric8 Kubernetes Java Client) called SharedInformer. Let’s see how it works:&lt;/p&gt; &lt;p&gt;We can initialize the informer factory like this:&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-21-44.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-21-44.png" alt="" width="641" height="46" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-21-44.png 874w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-21-44-300x22.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-21-44-768x55.png 768w" sizes="(max-width: 641px) 100vw, 641px" /&gt;&lt;/p&gt; &lt;p&gt;To get informer for &lt;code&gt;Pod&lt;/code&gt; resource, we need to pass classes of &lt;code&gt;Pod&lt;/code&gt;, &lt;code&gt;PodList&lt;/code&gt; and resync period (which is basically the interval after which informer should set up the connection again).&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-23-00.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-23-00.png" alt="" width="1014" height="86" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-23-00.png 1014w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-23-00-300x25.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-23-00-768x65.png 768w" sizes="(max-width: 1014px) 100vw, 1014px" /&gt;&lt;/p&gt; &lt;p&gt;Because &lt;code&gt;PodSet&lt;/code&gt; is a custom resource, we need to pass additional information while creating its informer. It’s not much, just small details related to its custom resource definition (CRD).&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30-1024x152.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30.png" alt="" width="1612" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30.png 1612w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30-768x114.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-25-30-1024x152.png 1024w" sizes="(max-width: 1612px) 100vw, 1612px" /&gt;&lt;/p&gt; &lt;p&gt;Once we have informers for both &lt;code&gt;Pod&lt;/code&gt; and &lt;code&gt;PodSet&lt;/code&gt; resource, then we need to pass all these into &lt;code&gt;PodSetController&lt;/code&gt;(would be discussed after this). After that, we would initialize the controller and run it. Now our &lt;code&gt;PodSetOperatorMain&lt;/code&gt; would look like this:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/PodSetOperatorMain.java#L26-L54"&gt;&lt;img class=" size-full wp-image-633227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03-1024x444.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03.png" alt="" width="1134" height="491" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03.png 1699w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03-300x130.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03-768x333.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-28-03-1024x444.png 1024w" sizes="(max-width: 1134px) 100vw, 1134px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now we need to take a look at &lt;code&gt;PodSetController&lt;/code&gt;, which contains the main logic for interacting with Kubernetes APIs and making the desired changes as per the events received. Let’s first look at its &lt;code&gt;create()&lt;/code&gt; method:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/controller/PodSetController.java#L44-L77"&gt;&lt;img class=" size-full wp-image-633237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50-1024x545.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50.png" alt="" width="1398" height="744" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50.png 1398w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50-768x409.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-29-50-1024x545.png 1024w" sizes="(max-width: 1398px) 100vw, 1398px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As we can see it’s adding event handlers for both informers: &lt;code&gt;Pod&lt;/code&gt; and &lt;code&gt;PodSet&lt;/code&gt;. In the case of &lt;code&gt;PodSet&lt;/code&gt;, we’re adding it to the work queue of the operator to process it afterward. In the case of &lt;code&gt;Pod&lt;/code&gt;, we’re checking whether that &lt;code&gt;Pod&lt;/code&gt; resource is related to our &lt;code&gt;PodSet&lt;/code&gt; custom resource or not, then only we’re trying to handle it (i.e., getting its owner from the metadata and checking the state of owner again).&lt;/p&gt; &lt;p&gt;Let’s look at &lt;code&gt;run()&lt;/code&gt; method of our controller; it is just de-queuing item from the work queue and passing it to &lt;code&gt;reconcile()&lt;/code&gt; method, which does the main work. Here is the body of &lt;code&gt;reconcile()&lt;/code&gt; method:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava/blob/master/src/main/java/io/fabric8/podset/operator/controller/PodSetController.java#L115-L135"&gt;&lt;img class=" size-full wp-image-633247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07-1024x346.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07.png" alt="" width="1228" height="415" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07.png 1419w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07-300x101.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07-768x259.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-31-07-1024x346.png 1024w" sizes="(max-width: 1228px) 100vw, 1228px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This&lt;code&gt; reconcile()&lt;/code&gt; method seems to be doing the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It receives a &lt;code&gt;PodSet&lt;/code&gt; object as an argument for which it tries to do reconciliation. Then, it tries to list all the pods in the cluster with the label &lt;code&gt;app=&amp;#60;name of PodSet&amp;#62;;&lt;/code&gt; let’s say it’s &lt;code&gt;app=example-podset&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Once the list operation of all pods with the label &lt;code&gt;app=example-podset&lt;/code&gt; is fetched, it checks whether the number of pods is equal to PodSet.spec.replicas. if the number of pods is less, it spins more pods into the cluster.&lt;/li&gt; &lt;li&gt;If the number of pods is more than the desired value, it tries to delete pods from the cluster.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Running your Operator&lt;/h3&gt; &lt;p&gt;We have covered most of the important portions of &lt;code&gt;PodSetController&lt;/code&gt;, so let’s try to run our operator on a Kubernetes cluster. I am using &lt;a href="https://github.com/kubernetes/minikube"&gt;Minikube&lt;/a&gt; for running this, which you can get from their &lt;a href="https://github.com/kubernetes/minikube/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633257 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-32-40.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-32-40.png" alt="" width="974" height="236" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-32-40.png 974w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-32-40-300x73.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Screenshot-from-2019-09-24-23-32-40-768x186.png 768w" sizes="(max-width: 974px) 100vw, 974px" /&gt;&lt;/p&gt; &lt;p&gt;When you run this, you should be able to see pods getting created upon creating a &lt;code&gt;PodSet&lt;/code&gt; custom resource as shown in this gif below:&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-633267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Peek-2019-09-24-23-36-1024x881.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Peek-2019-09-24-23-36.gif" alt="" width="1095" height="942" /&gt;&lt;/p&gt; &lt;p&gt;And that&amp;#8217;s it! If the above steps worked for you, congratulations! You have successfully written an operator in Java.&lt;/p&gt; &lt;h3&gt;See more&lt;/h3&gt; &lt;p&gt;GitHub repository: &lt;a href="https://github.com/rohanKanojia/podsetoperatorinjava"&gt;&lt;span style="font-weight: 400;"&gt;https://github.com/rohanKanojia/podsetoperatorinjava&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;iframe class='youtube-player' type='text/html' width='560' height='315' src='https://www.youtube.com/embed/uxR7Mfpn9HI?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#38;linkname=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F07%2Fwrite-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client%2F&amp;#038;title=Write%20a%20simple%20Kubernetes%20Operator%20in%20Java%20using%20the%20Fabric8%20Kubernetes%20Client" data-a2a-url="https://developers.redhat.com/blog/2019/10/07/write-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client/" data-a2a-title="Write a simple Kubernetes Operator in Java using the Fabric8 Kubernetes Client"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/07/write-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client/"&gt;Write a simple Kubernetes Operator in Java using the Fabric8 Kubernetes Client&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mdfzoBvaF-s" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Kubernetes is becoming much more than just a platform for running container workloads. Its API can be extended with application-specific Custom Resource Definitions(CRDs), and you can implement your own logic adapting your applications dynamically to changes in the cluster. In this article, we&amp;#8217;ll be writing a simple Kubernetes Operator in Java using the Fabric8 Kubernetes [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/07/write-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client/"&gt;Write a simple Kubernetes Operator in Java using the Fabric8 Kubernetes Client&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">632117</post-id><dc:creator>Rohan Kumar</dc:creator><dc:date>2019-10-07T07:00:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/07/write-a-simple-kubernetes-operator-in-java-using-the-fabric8-kubernetes-client/</feedburner:origLink></entry><entry><title>Getting Started with Cloud Native Development on OpenShift Container Platform (webinar)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/v0S0M951huM/getting-started-with-cloud-native-development-on-openshift-container-platform.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyStudio" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-getting_started_with_cloud_native_development_on_openshift_container_platform_webinar</id><updated>2019-10-07T11:08:56Z</updated><published>2019-10-07T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://redhat.devpost.com/?utm_source=redhat&amp;amp;utm_medium=OrganicSocial&amp;amp;utm_content=developers&amp;amp;utm_campaign=redhatrebootcx" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="cloud native development" border="0" data-original-height="288" data-original-width="1600" height="57" src="https://1.bp.blogspot.com/-6v4pFu8SU0w/XZsKUxSttaI/AAAAAAAAwrA/xZUBc-kA4QENeM0Ky3LiqDh1Mx_m4Xp8gCNcBGAsYHQ/s320/Screenshot%2B2019-10-07%2Bat%2B11.49.53.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;This week I'm hosting a webinar to kick start developers looking to get hands on with an easy to use Cloud Native developer tool chain. It's part of an introduction series of webinars (&lt;a href="https://redhat.devpost.com/updates/11233-six-webinars-next-week" target="_blank"&gt;more here&lt;/a&gt;) to help participants get started with their &lt;a href="https://redhat.devpost.com/?utm_source=redhat&amp;amp;utm_medium=OrganicSocial&amp;amp;utm_content=developers&amp;amp;utm_campaign=redhatrebootcx" target="_blank"&gt;hackaton competition&lt;/a&gt; using open source technologies.&lt;br /&gt;&lt;br /&gt;This hackaton is sponsored by Red Hat and it's an amazing opportunity for you to leverage the power and disruptiveness of open source. What better way to do this than by teaming up with your best developer colleagues, compete against the best developers in Europe, and take home awesome prizes! &lt;br /&gt;&lt;br /&gt;You choose the area. You choose the application, service, frameworks or programming languages you want to use for your solution. We only want you to leverage the power of open source technology provided by Red Hat and plan to mentor you through the process.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;In the webinar on Thursday, 10 Oct at 14:00 CET, I'll be walking you through, live and hands-on, how to setup the cloud native tool chain. You'll see how easy it is on the hand of an example front end application with database back end, then I'll show you how to generate a repository for the project code by linking to your Github account, and generating a CI/CD pipeline to build, test, and deploy directly in to your OpenShift Container Platform.&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-sizing: border-box; color: #003e54; font-family: &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: bold; letter-spacing: normal; line-height: inherit; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-rendering: optimizeLegibility; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; word-wrap: break-word;"&gt;Red Hat OpenShift Application Runtimes (RHOAR)&lt;/b&gt;&lt;span style="background-color: white; color: #575553; display: inline; float: none; font-family: &amp;quot;helvetica neue&amp;quot; , sans-serif; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #575553; display: inline; float: none; font-family: &amp;quot;helvetica neue&amp;quot; , sans-serif; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"&gt;When: Thursday, October 10: 14:00 CET (30 minutes)&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #575553; display: inline; float: none; font-family: &amp;quot;helvetica neue&amp;quot; , sans-serif; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"&gt;To Watch, follow this link:&lt;span class="Apple-converted-space"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://bluejeans.com/6370804305" style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-sizing: border-box; color: #2d9eb2; font-family: &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; line-height: inherit; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; word-wrap: break-word;"&gt;https://bluejeans.com/6370804305&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;I've recorded the session and annotated the experience for your viewing pleasure. Watch for this video to be posted here after the event. See you online later this week!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=CEEZWbZ9mlg:iw6wy4e6Y9g:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=CEEZWbZ9mlg:iw6wy4e6Y9g:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=CEEZWbZ9mlg:iw6wy4e6Y9g:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=CEEZWbZ9mlg:iw6wy4e6Y9g:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=CEEZWbZ9mlg:iw6wy4e6Y9g:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/CEEZWbZ9mlg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/v0S0M951huM" height="1" width="1" alt=""/&gt;</content><summary>This week I'm hosting a webinar to kick start developers looking to get hands on with an easy to use Cloud Native developer tool chain. It's part of an introduction series of webinars (more here) to help participants get started with their hackaton competition using open source technologies. This hackaton is sponsored by Red Hat and it's an amazing opportunity for you to leverage the power and dis...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-10-07T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/CEEZWbZ9mlg/getting-started-with-cloud-native-development-on-openshift-container-platform.html</feedburner:origLink></entry><entry><title>Upcoming Webinar - Integration Patterns in a Serverless World</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_Cou8gFuJgQ/upcoming-webinar-integration-patterns.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="camelk" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="webinar" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-upcoming_webinar_integration_patterns_in_a_serverless_world</id><updated>2019-10-04T07:59:24Z</updated><published>2019-10-04T07:59:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Next Thursday, October 10th, I am giving a 35 minutes &lt;a href="https://www.redhat.com/en/events/webinar/develop-deploy-deliver-continuously?sc_cid=701f2000000uI48AAE"&gt;webinar about Serverless Integration &lt;/a&gt;(yeah it covers &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;, Camel K, Knative and Quarkus).&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-GI5-lB0uuUw/XZb6Lit9XWI/AAAAAAAAB_o/k4lq0lLa0IE_847E-PWevLt2xQ63fwR5ACLcBGAsYHQ/s1600/Screenshot%2B2019-10-04%2Bat%2B09.51.38.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="279" data-original-width="479" height="186" src="https://1.bp.blogspot.com/-GI5-lB0uuUw/XZb6Lit9XWI/AAAAAAAAB_o/k4lq0lLa0IE_847E-PWevLt2xQ63fwR5ACLcBGAsYHQ/s320/Screenshot%2B2019-10-04%2Bat%2B09.51.38.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The webinar is part of a full day event (virtual event) where there are keynotes and a parallel tracks with 12 breakout sessions.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;My talk is focused purely on the upstream work we do at Apache Camel with the next generation Camel 3.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The abstract for my talk&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Cloud-native applications of the future will consist of hybrid workloads: stateful applications, batch jobs, microservices, and functions, wrapped as Linux containers and deployed via Kubernetes on any cloud.&lt;br /&gt;&lt;br /&gt;In this session, we'll explore the key challenges with function interactions and coordination, addressing these problems using classic integration patterns and modern approaches with the latest innovation from the Apache Camel community: Camel K, a lightweight integration platform that enables enterprise integration patterns to be used natively on any Kubernetes cluster.&lt;br /&gt;&lt;br /&gt;When used in combination with Knative, a framework that adds serverless building blocks to Kubernetes, and the subatomic execution environment of Quarkus, Camel K can mix serverless features such as auto-scaling, scaling to zero, and event-based communication with the outstanding integration capabilities of Apache Camel.&lt;br /&gt;&lt;br /&gt;We will show how Camel K works. We'll also use examples to demonstrate how Camel K makes it easier to connect cloud services or enterprise applications using some of the 250+ components that Camel provides.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Registration&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The event is free to attend, and you can &lt;a href="https://www.redhat.com/en/events/webinar/develop-deploy-deliver-continuously?sc_cid=701f2000000uI48AAE"&gt;signup using this link&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Date: October 10th 2019&lt;br /&gt;Time: 5 pm CEST (event starts with keynotes)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/wep3JSgvpYo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_Cou8gFuJgQ" height="1" width="1" alt=""/&gt;</content><summary>Next Thursday, October 10th, I am giving a 35 minutes webinar about Serverless Integration (yeah it covers Apache Camel, Camel K, Knative and Quarkus). The webinar is part of a full day event (virtual event) where there are keynotes and a parallel tracks with 12 breakout sessions.  My talk is focused purely on the upstream work we do at Apache Camel with the next generation Camel 3. The abstract f...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-10-04T07:59:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/wep3JSgvpYo/upcoming-webinar-integration-patterns.html</feedburner:origLink></entry><entry><title>Getting started with Golang Operators by using Operator SDK</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jFU3tyt0Qfo/" /><category term="Go" /><category term="OpenShift" /><category term="Kubernetes" /><category term="Operators" /><author><name>Camila Macedo</name></author><id>https://developers.redhat.com/blog/?p=631057</id><updated>2019-10-04T07:00:00Z</updated><published>2019-10-04T07:00:00Z</published><content type="html">&lt;p&gt;The open source &lt;a href="https://coreos.com/blog/introducing-operator-framework"&gt;Operator Framework&lt;/a&gt; is a toolkit to manage Kubernetes-native applications. The framework and its features provide the ability to develop solutions to simplify some complexities, such as the process to install, configure, manage and package applications on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. It provides the ability to use a client to perform CRUD actions, that is, operations to create, read, update, and delete data on these platforms.&lt;/p&gt; &lt;p&gt;By using operators, it&amp;#8217;s possible not only to provide all expected resources but also to manage them dynamically, programmatically, and at execution time. To illustrate this idea, imagine if someone accidentally changed a configuration or removed a resource by mistake; in this case, the operator could fix it without any human intervention. We&amp;#8217;ll take a look at Operators and the &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator SDK&lt;/a&gt; in this article.&lt;br /&gt; &lt;span id="more-631057"&gt;&lt;/span&gt;&lt;br /&gt; &lt;strong&gt;Note:&lt;/strong&gt; As a prerequisite for this content, it&amp;#8217;s essential to follow the steps outlined in the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; &lt;h2&gt;APIs&lt;/h2&gt; &lt;p&gt;When following the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt;, one of the first steps is to run the command &lt;code&gt;operator-sdk add api --api-version=cache.example.com/v1alpha1 --kind=Memcached.&lt;/code&gt; The purpose of this command is to generate Custom Resource (CR) and Custom Resource Definition (CRD) resources for the &lt;a href="https://github.com/operator-framework/operator-sdk/blob/master/doc/user-guide.md"&gt;Memcached&lt;/a&gt; Kind. This command is creating the API with the group &lt;code&gt;cache.example.com&lt;/code&gt;, and version &lt;code&gt;v1alpha1&lt;/code&gt; &lt;span style="font-weight: 400;"&gt;  which uniquely identifies the new CRD of the &lt;code&gt;Memcached&lt;/code&gt; Kind.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Consequently, by using the Operator SDK tool, we can create our APIs and objects that will represent our solutions on these platforms. The &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt; tutorial adds only a single kind of resource; however, it could have as many Kinds as needed (1…N). Basically, the CRDs are a definition of our customized Objects, and the CRs are an instance of it.&lt;/p&gt; &lt;h2&gt;Project&lt;/h2&gt; &lt;p&gt;The Manager is responsible for managing Controllers and, then by the controllers, we can do operations on the cluster side. For a better understanding of how it works, see that in the example, one of the steps was to create a Docker image with the command &lt;code&gt;$operator-sdk build user/image:tag&lt;/code&gt; and then replace the value &lt;code&gt;REPLACE_IMAGE&lt;/code&gt; in the file &lt;code&gt;operator.yaml&lt;/code&gt; file.  This file describes the project instance built by it. Note that, by running the command &lt;code&gt;kubectl create -f deploy/operator.yaml&lt;/code&gt; we are creating a pod with this image.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Demonstrating&lt;/b&gt; the idea&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s think about the classic scenario where the goal is to have an application and its database running on the platform with Kubernetes. Then, one object could represent the App, and another one could represent the DB. By having one CRD to describe the App and another one for the DB, we will not be hurting concepts such as encapsulation, the single responsibility principle, and cohesion. Damaging these concepts could cause unexpected side effects, such as difficulty in extending, reuse, or maintenance, just to mention a few.&lt;/p&gt; &lt;p&gt;In conclusion, the App CRD will have as its controller the DB CRD. Imagine, that a Deployment and Service are required for the application run so that the App&amp;#8217;s Controller will provide these resources in this example. Similarly, the DB&amp;#8217;s controller will have the business logic implementation of its objects.&lt;/p&gt; &lt;p&gt;In this way, for each CRD, one controller should be produced according to the design set by the &lt;a href="https://github.com/kubernetes-sigs/controller-runtime"&gt;controller-runtime&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Controller main functions&lt;/h2&gt; &lt;h3&gt;Reconcile()&lt;/h3&gt; &lt;p&gt;The reconcile function is responsible for synchronizing the resources and their specifications according to the business logic implemented on them. In this way, it works like a loop, and it does not stop until all conditionals match its implementation. The following is pseudo-code with an example that clarifies it.&lt;/p&gt; &lt;pre&gt;reconcile App { // Check if a Deployment for the app exists, if not create one // If has an error, then go to the beginning of the reconcile &lt;span class="pl-k"&gt; if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{}, err } // Check if a Service for the app exists, if not create one // If has an error, then go to the beginning of the reconcile &lt;span class="pl-k"&gt;if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{}, err } // Looking for Database CR/CRD // Check the Database Deployments Replicas size // If deployment.replicas size != cr.size, then update it // Then, go to the beginning of the reconcile &lt;span class="pl-k"&gt;if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{Requeue: true}, nil } ... // If it is at the end of the loop, then: // All was done successfully and the reconcile can stop return reconcile.Result{}, nil } &lt;/pre&gt; &lt;p&gt;The following are possible return options to restart the Reconcile:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;With the error:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{}, err&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Without an error:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{Requeue: true}, nil&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Therefore, to stop the Reconcile, use:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{}, nil&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For more details, check the &lt;code&gt;Reconcile&lt;/code&gt; and its &lt;code&gt;Result&lt;/code&gt; &lt;a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/reconcile" target="_blank" rel="noopener noreferrer"&gt;implementations&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Watch()&lt;/h3&gt; &lt;p&gt;The watches are responsible for &amp;#8221;watching&amp;#8221; the objects and triggering the Reconcile. Also, the Operator SDK tool will generate a Watch function for each primary resource (CRD). Here is an example:&lt;/p&gt; &lt;pre&gt;// Watch for changes to primary resource Memcached err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;cachev1alpha1.Memcached{}}, &amp;#38;handler.EnqueueRequestForObject{}) if err != nil { return err } &lt;/pre&gt; &lt;p&gt;By following the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt;, a watch function for each secondary object managed by it will also be implemented, such as below.&lt;/p&gt; &lt;pre&gt;// Watch for changes to secondary resource Pods and requeue the owner Memcached err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;appsv1.Deployment{}}, &amp;#38;handler.EnqueueRequestForOwner{ IsController: true, OwnerType: &amp;#38;cachev1alpha1.Memcached{}, }) if err != nil { return err } err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;corev1.Service{}}, &amp;#38;handler.EnqueueRequestForOwner{ IsController: true, OwnerType: &amp;#38;cachev1alpha1.Memcached{}, }) if err != nil { return err } &lt;/pre&gt; &lt;p&gt;Also, the following code ensures the quantity of Memcached replicas running on the cluster.&lt;/p&gt; &lt;pre&gt;// Ensure the deployment size is the same as the spec size := memcached.Spec.Size if *deployment.Spec.Replicas != size { deployment.Spec&amp;#62;.Replicas = &amp;#38;size err = r.client.Update(context.TODO(), deployment) if err != nil { reqLogger.Error(err, "Failed to update Deployment.", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name) return reconcile.Result{}, err } } &lt;/pre&gt; &lt;p&gt;After that, you can check that the above code worked by doing the following steps.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Scale the Memcached pod up or down.&lt;/li&gt; &lt;li&gt;Check that the replicas will come back for the original size because of the above code.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above steps will only work if you were able to follow the guide and all finished successfully.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#038;title=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" data-a2a-url="https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/" data-a2a-title="Getting started with Golang Operators by using Operator SDK"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/"&gt;Getting started with Golang Operators by using Operator SDK&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jFU3tyt0Qfo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The open source Operator Framework is a toolkit to manage Kubernetes-native applications. The framework and its features provide the ability to develop solutions to simplify some complexities, such as the process to install, configure, manage and package applications on Kubernetes and Red Hat OpenShift. It provides the ability to use a client to perform CRUD [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/"&gt;Getting started with Golang Operators by using Operator SDK&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">631057</post-id><dc:creator>Camila Macedo</dc:creator><dc:date>2019-10-04T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/</feedburner:origLink></entry><entry><title>Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YIUDODqVBtc/" /><category term="OpenShift" /><category term="Red Hat AMQ" /><category term="Red Hat Fuse" /><category term="video" /><author><name>Mary Cochran</name></author><id>https://developers.redhat.com/blog/?p=631147</id><updated>2019-10-03T07:00:32Z</updated><published>2019-10-03T07:00:32Z</published><content type="html">&lt;p&gt;In the following video, I demonstrate how to deploy &lt;a href="https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/"&gt;Red Hat AMQ Streams&lt;/a&gt; (based on upstream Apache Kafka) on &lt;a href="https://developers.redhat.com/openshift/"&gt;OpenShift 4&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I will also demonstrate how to use AMQ Streams in a basic way using &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt;.  There is a Camel route exposing a REST endpoint at &lt;code&gt;/goodbye&lt;/code&gt;, which—when hit—sends a &amp;#8220;Goodbye World&amp;#8221; message to the topic.  There is also a timer sending &amp;#8220;Hello World&amp;#8221; messages periodically to the topic.  A separate Camel route consumes from the topic and logs the messages for our visibility.&lt;span id="more-631147"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Check out how simple it can be to get AMQ Streams up and running on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/S1PmT01FJ80" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#038;title=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" data-a2a-url="https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/" data-a2a-title="Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/"&gt;Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YIUDODqVBtc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the following video, I demonstrate how to deploy Red Hat AMQ Streams (based on upstream Apache Kafka) on OpenShift 4. I will also demonstrate how to use AMQ Streams in a basic way using Red Hat Fuse.  There is a Camel route exposing a REST endpoint at /goodbye, which—when hit—sends a &amp;#8220;Goodbye World&amp;#8221; message [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/"&gt;Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">631147</post-id><dc:creator>Mary Cochran</dc:creator><dc:date>2019-10-03T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/</feedburner:origLink></entry></feed>
